{
  "name": "com.unity.addressables",
  "displayName": "Addressables",
  "version": "2.0.3",
  "unity": "2023.1",
  "description": "The Addressable Asset System allows the developer to ask for an asset via its address. Once an asset (e.g. a prefab) is marked \"addressable\", it generates an address which can be called from anywhere. Wherever the asset resides (local or remote), the system will locate it and its dependencies, then return it.\n\nUse 'Window->Asset Management->Addressables' to begin working with the system.\n\nAddressables use asynchronous loading to support loading from any location with any collection of dependencies. Whether you have been using direct references, traditional asset bundles, or Resource folders, addressables provide a simpler way to make your game more dynamic. Addressables simultaneously opens up the world of asset bundles while managing all the complexity.\n\nFor usage samples, see github.com/Unity-Technologies/Addressables-Sample",
  "keywords": [
    "asset",
    "resources",
    "bundle",
    "bundles",
    "assetbundles"
  ],
  "dependencies": {
    "com.unity.scriptablebuildpipeline": "2.0.1",
    "com.unity.modules.assetbundle": "1.0.0",
    "com.unity.modules.imageconversion": "1.0.0",
    "com.unity.modules.jsonserialize": "1.0.0",
    "com.unity.modules.unitywebrequest": "1.0.0",
    "com.unity.modules.unitywebrequestassetbundle": "1.0.0",
    "com.unity.profiling.core": "1.0.2"
  },
  "_upm": {
    "changelog": "- ProfileValueReference.GetValue is now the preferred method of getting bulid and load paths. A new method has been added that allows token evaluation to be toggled on and off. Using this method ensures that custom build and load paths are handled properly.\n- In the Editor when a sprite is no longer available it will be cleared when the property drawer is viewed. \n- Add a SubObjectGUID to sprite atlases and use GUIDs for the runtime loading key if is exists. \n- Catalog hashes get build with the local catalog now.  This prevents remote catalogs from getting downloaded if they match what was shipped with a player\n- Added overloads to LoadAssetsAsync to accept a single string as a key\n- Added bundle request retry override.\n- Added shared bundle settings to AddressableAssetSettings. Monoscript bundle is always enabled.\n- Added more BuildLayout public API\n- Fixed issue with misleading error message for loading through asset where the asset is not Addressable in editor.\n- Added in safeguard to prevent Compress Local Catalog option from being on alongside Binary Catalogs\n- Fixed an issue where ResourceLocation would return a useless value when using Binary Catalogs\n- Fixed an issue where there would sometimes be a minor memory leak when using Binary Catalogs\n- Fixed an issue where Binary Catalogs would not be cached properly\n- Fixed a bug where a GUI style was misspelled in the Editor and was recently fixed\n- Fixed an issue where FindAssetEntry returns incorrect values after Undo/Redo\n- Fixed a regression where remote provider failures were not retried.\n- Fixed an issue where a NullReferenceException occurs when inspecting Addressable Settings\n- Fixed an issue where the content update groups list being cutoff by buttons\n- Fixed an issue where an ArgumentException occurs when sorting labels and creating a new group.\n- Fixed an issue where using binary catalogs causes a crash on Android with ARM7.\n- Fixed an issue where a NullReferenceException occurs in GenerateBuildLayout when a group is null.\n- Fixed a bug where Timeout and Redirect Limit were getting serialized to different values from what was allowed in the Group schema\n- DownloadDepedenciesAsync no longer loads asset bundles into memory\n- Fixed issue where ResourceLocations weren't getting compared correctly for properties like AllLocations\n- Fixed an issue where scene InternalId collisions were very likely when using dynamic internal asset naming\n- Fixed an issue where sprites with normal maps would not be built properly\n- Fixed an issue where \"Failed to remove scene from Addressables profiler\" warning occurs when a scene is unloaded.\n- Fixed an exception getting thrown in the Addressables Report when drilling into a bundle chain\n- Fixed string deduplication in binary catalogs.  Certain data sets were causing data to expand."
  },
  "upmCi": {
    "footprint": "120f3243eb4e65ab892935ef47ed96735cf484e3"
  },
  "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.addressables@2.0/manual/index.html",
  "repository": {
    "url": "https://github.cds.internal.unity3d.com/unity/Addressables.git",
    "type": "git",
    "revision": "a4b05e52b30fdc6baa0dfc804e1adce171ec49b5"
  },
  "samples": [
    {
      "displayName": "Addressables Utility",
      "description": "This sample contains a set of utility functions for Addressables.",
      "path": "Samples~/AddressablesUtility"
    },
    {
      "displayName": "ComponentReference",
      "description": "This sample creates an AssetReference that is restricted to having a specific Component. See the ComponentReference sample project located at github.com/Unity-Technologies/Addressables-Sample",
      "path": "Samples~/ComponentReference"
    },
    {
      "displayName": "Custom Build and Playmode Scripts",
      "description": "Example custom build and play mode scripts provided.  Along with a README discussing how to add them to the Addressables system.",
      "path": "Samples~/CustomBuildAndPlaymodeScripts"
    },
    {
      "displayName": "Disable AssetImport on Build",
      "description": "A script that disables asset importing during a player build.  This improves build performance since AssetBundles are copied into StreamingAssets at build time.",
      "path": "Samples~/DisableAssetImportOnBuild"
    },
    {
      "displayName": "Import Groups Tool",
      "description": "A tool that imports group assets (for example from a custom package) to the current project.",
      "path": "Samples~/ImportExistingGroup"
    },
    {
      "displayName": "Prefab Spawner",
      "description": "A basic script that instantiates and destroys a prefab AssetReference.",
      "path": "Samples~/PrefabSpawner"
    }
  ]
}
